{"version":3,"file":"audiorecorder.min.js","sources":["../src/audiorecorder.js"],"sourcesContent":["define(['jquery', 'core/log','core/notification', 'qtype_aitext/audiohelper','qtype_aitext/browserrec','core/str','qtype_aitext/timer' ],\n    function ($, log, notification, audioHelper, browserRec,str, timer) {\n    \"use strict\"; // jshint ;_;\n    /*\n    *  The TT recorder\n     */\n\n    log.debug('qtype_aitext Audio Recorder: initialising');\n\n    return {\n        waveHeight: 75,\n        audio: {\n            stream: null,\n            blob: null,\n            dataURI: null,\n            start: null,\n            end: null,\n            isRecording: false,\n            isRecognizing: false,\n            transcript: null\n        },\n        submitting: false,\n        controls: {},\n        uniqueid: null,\n        audio_updated: null,\n        maxtime: 15000,\n        passagehash: null,\n        region: null,\n        asrurl: null,\n        lang: null,\n        browserrec: null,\n        usebrowserrec: false,\n        currentTime: 0,\n        stt_guided: false,\n        currentPrompt: false,\n        strings: {},\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        init: function(opts){\n            var that = this;\n            this.uniqueid=opts['uniqueid'];\n            this.callback=opts['callback'];\n            this.stt_guided = opts['stt_guided'] ? opts['stt_guided'] : false;\n            this.init_strings();\n            this.prepare_html();\n            this.controls.recordercontainer.show();\n            this.register_events();\n\n            // Callbacks.\n\n            // Callback: Timer updates.\n            var handle_timer_update = function(){\n                var displaytime = that.timer.fetch_display_time();\n                that.controls.timerstatus.html(displaytime);\n                if (that.timer.seconds == 0 && that.timer.initseconds > 0) {\n                    that.update_audio('isRecognizing', true);\n                    that.audiohelper.stop();\n                }\n            };\n\n            // Callback: Recorder device errors.\n            var on_error = function(error) {\n                switch (error.name) {\n                    case 'PermissionDeniedError':\n                    case 'NotAllowedError':\n                        notification.alert(\"Error\",that.strings.allowmicaccess, \"OK\");\n                        break;\n                    case 'DevicesNotFoundError':\n                    case 'NotFoundError':\n                        notification.alert(\"Error\",that.strings.nomicdetected, \"OK\");\n                        break;\n                    default:\n                        //other errors, like from Edge can fire repeatedly so a notification is not a good idea\n                        //notification.alert(\"Error\", error.name, \"OK\");\n                        log.debug(\"Error\", error.name);\n                }\n            };\n\n            // Callback: Recording stopped.\n            var on_stopped = function(blob) {\n                that.timer.stop()\n\n                //if the blob is undefined then the user is super clicking or something\n                if(blob===undefined){\n                    return;\n                }\n\n                //if ds recc\n                var newaudio = {\n                    blob: blob,\n                    dataURI: URL.createObjectURL(blob),\n                    end: new Date(),\n                    isRecording: false,\n                    length: Math.round((that.audio.end - that.audio.start) / 1000),\n                };\n                that.update_audio(newaudio);\n\n                that.deepSpeech2(that.audio.blob, function(response){\n                    log.debug(response);\n                    if(response.data.result===\"success\" && response.data.transcript){\n                        that.gotRecognition(response.data.transcript.trim());\n                    } else {\n                        notification.alert(\"Information\",that.strings.speechnotrecognized, \"OK\");\n                    }\n                    that.update_audio('isRecognizing',false);\n                });\n\n            };\n\n            // Callback: Recorder device got stream - start recording\n            var on_gotstream=  function(stream) {\n                var newaudio={stream: stream, isRecording: true};\n                that.update_audio(newaudio);\n\n                //TO DO - conditionally start timer here (not toggle recording)\n                //so a device error does not cause timer disaster\n                // that.timer.reset();\n                // that.timer.start();\n                \n            };\n\n            //If browser rec (Chrome Speech Rec) (and ds is optiona)\n            if(browserRec.will_work_ok() && ! this.stt_guided){\n                //Init browserrec\n                log.debug(\"using browser rec\");\n                log.debug('arh : ' + that.uniqueid);\n                that.browserrec = browserRec.clone();\n                log.debug('arh : ' + that.uniqueid);\n                that.browserrec.init(that.lang,that.waveHeight,that.uniqueid);\n                that.usebrowserrec=true;\n\n                //set up events\n                that.browserrec.onerror = on_error;\n                that.browserrec.onend = function(){\n                        //do something here\n                };\n                that.browserrec.onstart = function(){\n                    //do something here\n                };\n                that.browserrec.onfinalspeechcapture=function(speechtext){\n                    that.gotRecognition(speechtext);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',false);\n                };\n\n                that.browserrec.oninterimspeechcapture=function(speechtext){\n                    that.gotInterimRecognition(speechtext);\n                };\n\n            //If DS rec\n            }else {\n                //set up wav for ds rec\n                log.debug(\"using ds rec\");\n                this.audiohelper =  audioHelper.clone();\n                this.audiohelper.init(this.waveHeight,this.uniqueid,this);\n\n                that.audiohelper.onError = on_error;\n                that.audiohelper.onStop = on_stopped;\n                that.audiohelper.onStream = on_gotstream;\n\n            }//end of setting up recorders\n\n            // Setting up timer.\n            this.timer = timer.clone();\n            this.timer.init(this.maxtime, handle_timer_update);\n            // Init the timer readout\n            handle_timer_update();\n        },\n\n        init_strings: function(){\n            var that=this;\n            str.get_strings([\n                { \"key\": \"allowmicaccess\", \"component\": 'mod_minilesson'},\n                { \"key\": \"nomicdetected\", \"component\": 'mod_minilesson'},\n                { \"key\": \"speechnotrecognized\", \"component\": 'mod_minilesson'},\n\n            ]).done(function (s) {\n                var i = 0;\n                that.strings.allowmicaccess = s[i++];\n                that.strings.nomicdetected = s[i++];\n                that.strings.speechnotrecognized = s[i++];\n            });\n        },\n\n        prepare_html: function(){\n            this.controls.recordercontainer =$('.audiorec_container_' + this.uniqueid);\n            this.controls.recorderbutton = $('.' + this.uniqueid + '_recorderdiv');\n            this.controls.timerstatus = $('.' + this.uniqueid + '_timerstatus');\n            this.passagehash = this.controls.recorderbutton.data('passagehash');\n            this.region=this.controls.recorderbutton.data('region');\n            this.lang=this.controls.recorderbutton.data('lang');\n            this.asrurl=this.controls.recorderbutton.data('asrurl');\n            this.maxtime=this.controls.recorderbutton.data('maxtime');\n            this.waveHeight=this.controls.recorderbutton.data('waveheight');\n        },\n\n        silence_detected: function(){\n            if(this.audio.isRecording){\n                this.toggleRecording();\n            }\n        },\n\n        update_audio: function(newprops,val){\n            if (typeof newprops === 'string') {\n                log.debug('update_audio:' + newprops + ':' + val);\n                if (this.audio[newprops] !== val) {\n                    this.audio[newprops] = val;\n                    this.audio_updated();\n                }\n            }else{\n                for (var theprop in newprops) {\n                    this.audio[theprop] = newprops[theprop];\n                    log.debug('update_audio:' + theprop + ':' + newprops[theprop]);\n                }\n                this.audio_updated();\n            }\n        },\n\n        register_events: function(){\n            var that = this;\n            this.controls.recordercontainer.click(function(){\n                that.toggleRecording();\n            });\n\n            this.audio_updated=function() {\n                //pointer\n                if (that.audio.isRecognizing) {\n                    that.show_recorder_pointer('none');\n                } else {\n                    that.show_recorder_pointer('auto');\n                }\n\n                if(that.audio.isRecognizing || that.audio.isRecording ) {\n                    this.controls.recorderbutton.css('background', '#e52');\n                }else{\n                    this.controls.recorderbutton.css('background', 'green');\n                }\n\n                //div content WHEN?\n                that.controls.recorderbutton.html(that.recordBtnContent());\n            };\n\n        },\n\n        show_recorder_pointer: function(show){\n            if(show) {\n                this.controls.recorderbutton.css('pointer-events', 'none');\n            }else{\n                this.controls.recorderbutton.css('pointer-events', 'auto');\n            }\n\n        },\n\n\n        gotRecognition:function(transcript){\n            log.debug('transcript:' + transcript);\n            var message={};\n            message.type='speech';\n            message.capturedspeech = transcript;\n           //POINT\n            this.callback(message);\n        },\n\n        gotInterimRecognition:function(transcript){\n            var message={};\n            message.type='interimspeech';\n            message.capturedspeech = transcript;\n            //POINT\n            this.callback(message);\n        },\n\n        cleanWord: function(word) {\n            return word.replace(/['!\"#$%&\\\\'()\\*+,\\-\\.\\/:;<=>?@\\[\\\\\\]\\^_`{|}~']/g,\"\").toLowerCase();\n        },\n\n        recordBtnContent: function() {\n\n            if(!this.audio.isRecognizing){\n\n                if (this.audio.isRecording) {\n                    return '<i class=\"fa fa-stop\">';\n                } else {\n                    return '<i class=\"fa fa-microphone\">';\n                }\n\n            } else {\n                return '<i class=\"fa fa-spinner fa-spin\">';\n            }\n        },\n        toggleRecording: function() {\n            var that =this;\n            //If we are recognizing, then we want to discourage super click'ers\n            if (this.audio.isRecognizing) {\n                return;\n            }\n\n            //If we are current recording\n            if (this.audio.isRecording) {\n                that.timer.stop();\n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){    \n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',true);\n                    this.browserrec.stop();\n\n                //If using DS rec\n                }else{\n                    this.update_audio('isRecognizing',true);\n                    this.audiohelper.stop();\n                }\n\n             //If we are NOT currently recording\n            } else {\n                // Run the timer\n                that.currentTime = 0;\n                that.timer.reset();\n                that.timer.start();\n                \n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    this.update_audio('isRecording',true);\n                    this.browserrec.start();\n\n                //If using DS Rec\n                }else {\n                    var newaudio = {\n                        stream: null,\n                        blob: null,\n                        dataURI: null,\n                        start: new Date(),\n                        end: null,\n                        isRecording: false,\n                        isRecognizing:false,\n                        transcript: null\n                    };\n                    this.update_audio(newaudio);\n                    this.audiohelper.start();\n                }\n            }\n        },\n\n\n        deepSpeech2: function(blob, callback) {\n            var bodyFormData = new FormData();\n            var blobname = this.uniqueid + Math.floor(Math.random() * 100) +  '.wav';\n            bodyFormData.append('audioFile', blob, blobname);\n            bodyFormData.append('scorer', this.passagehash);\n            if(this.stt_guided) {\n                bodyFormData.append('strictmode', 'false');\n            }else{\n                bodyFormData.append('strictmode', 'true');\n            }\n            //prompt is used by whisper and other transcibers down the line\n            if(this.currentPrompt!==false){\n                bodyFormData.append('prompt', this.currentPrompt);\n            }\n            bodyFormData.append('lang', this.lang);\n            bodyFormData.append('wwwroot', M.cfg.wwwroot);\n\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"POST\", this.asrurl, true);\n            oReq.onUploadProgress= function(progressEvent) {};\n            oReq.onload = function(oEvent) {\n                if (oReq.status === 200) {\n                    callback(JSON.parse(oReq.response));\n                } else {\n                    callback({data: {result: \"error\"}});\n                    log.debug(oReq.error);\n                }\n            };\n            try {\n                oReq.send(bodyFormData);\n            }catch(err){\n                callback({data: {result: \"error\"}});\n                log.debug(err);\n            }\n        },\n\n    };//end of return value\n\n});"],"names":["define","$","log","notification","audioHelper","browserRec","str","timer","debug","waveHeight","audio","stream","blob","dataURI","start","end","isRecording","isRecognizing","transcript","submitting","controls","uniqueid","audio_updated","maxtime","passagehash","region","asrurl","lang","browserrec","usebrowserrec","currentTime","stt_guided","currentPrompt","strings","clone","extend","this","init","opts","that","callback","init_strings","prepare_html","recordercontainer","show","register_events","handle_timer_update","displaytime","fetch_display_time","timerstatus","html","seconds","initseconds","update_audio","audiohelper","stop","on_error","error","name","alert","allowmicaccess","nomicdetected","will_work_ok","onerror","onend","onstart","onfinalspeechcapture","speechtext","gotRecognition","oninterimspeechcapture","gotInterimRecognition","onError","onStop","undefined","newaudio","URL","createObjectURL","Date","length","Math","round","deepSpeech2","response","data","result","trim","speechnotrecognized","onStream","get_strings","done","s","i","recorderbutton","silence_detected","toggleRecording","newprops","val","theprop","click","show_recorder_pointer","css","recordBtnContent","message","capturedspeech","cleanWord","word","replace","toLowerCase","reset","bodyFormData","FormData","blobname","floor","random","append","M","cfg","wwwroot","oReq","XMLHttpRequest","open","onUploadProgress","progressEvent","onload","oEvent","status","JSON","parse","send","err"],"mappings":"AAAAA,oCAAO,CAAC,SAAU,WAAW,oBAAqB,2BAA2B,0BAA0B,WAAW,uBAC9G,SAAUC,EAAGC,IAAKC,aAAcC,YAAaC,WAAWC,IAAKC,cAM7DL,IAAIM,MAAM,6CAEH,CACHC,WAAY,GACZC,MAAO,CACHC,OAAQ,KACRC,KAAM,KACNC,QAAS,KACTC,MAAO,KACPC,IAAK,KACLC,aAAa,EACbC,eAAe,EACfC,WAAY,MAEhBC,YAAY,EACZC,SAAU,GACVC,SAAU,KACVC,cAAe,KACfC,QAAS,KACTC,YAAa,KACbC,OAAQ,KACRC,OAAQ,KACRC,KAAM,KACNC,WAAY,KACZC,eAAe,EACfC,YAAa,EACbC,YAAY,EACZC,eAAe,EACfC,QAAS,GAGTC,MAAO,kBACIjC,EAAEkC,QAAO,EAAM,GAAIC,OAG9BC,KAAM,SAASC,UACPC,KAAOH,UACNf,SAASiB,KAAI,cACbE,SAASF,KAAI,cACbP,aAAaO,KAAI,YAAiBA,KAAI,gBACtCG,oBACAC,oBACAtB,SAASuB,kBAAkBC,YAC3BC,sBAKDC,oBAAsB,eAClBC,YAAcR,KAAKhC,MAAMyC,qBAC7BT,KAAKnB,SAAS6B,YAAYC,KAAKH,aACL,GAAtBR,KAAKhC,MAAM4C,SAAgBZ,KAAKhC,MAAM6C,YAAc,IACpDb,KAAKc,aAAa,iBAAiB,GACnCd,KAAKe,YAAYC,SAKrBC,SAAW,SAASC,cACZA,MAAMC,UACL,4BACA,kBACDvD,aAAawD,MAAM,QAAQpB,KAAKN,QAAQ2B,eAAgB,gBAEvD,2BACA,gBACDzD,aAAawD,MAAM,QAAQpB,KAAKN,QAAQ4B,cAAe,oBAKvD3D,IAAIM,MAAM,QAASiD,MAAMC,QAgDlCrD,WAAWyD,iBAAoB1B,KAAKL,YAEnC7B,IAAIM,MAAM,qBACVN,IAAIM,MAAM,SAAW+B,KAAKlB,UAC1BkB,KAAKX,WAAavB,WAAW6B,QAC7BhC,IAAIM,MAAM,SAAW+B,KAAKlB,UAC1BkB,KAAKX,WAAWS,KAAKE,KAAKZ,KAAKY,KAAK9B,WAAW8B,KAAKlB,UACpDkB,KAAKV,eAAc,EAGnBU,KAAKX,WAAWmC,QAAUP,SAC1BjB,KAAKX,WAAWoC,MAAQ,aAGxBzB,KAAKX,WAAWqC,QAAU,aAG1B1B,KAAKX,WAAWsC,qBAAqB,SAASC,YAC1C5B,KAAK6B,eAAeD,YACpB5B,KAAKc,aAAa,eAAc,GAChCd,KAAKc,aAAa,iBAAgB,IAGtCd,KAAKX,WAAWyC,uBAAuB,SAASF,YAC5C5B,KAAK+B,sBAAsBH,eAM/BjE,IAAIM,MAAM,qBACL8C,YAAelD,YAAY8B,aAC3BoB,YAAYjB,KAAKD,KAAK3B,WAAW2B,KAAKf,SAASe,MAEpDG,KAAKe,YAAYiB,QAAUf,SAC3BjB,KAAKe,YAAYkB,OA9EJ,SAAS5D,SACtB2B,KAAKhC,MAAMgD,YAGDkB,IAAP7D,UAKC8D,SAAW,CACX9D,KAAMA,KACNC,QAAS8D,IAAIC,gBAAgBhE,MAC7BG,IAAK,IAAI8D,KACT7D,aAAa,EACb8D,OAAQC,KAAKC,OAAOzC,KAAK7B,MAAMK,IAAMwB,KAAK7B,MAAMI,OAAS,MAE7DyB,KAAKc,aAAaqB,UAElBnC,KAAK0C,YAAY1C,KAAK7B,MAAME,MAAM,SAASsE,UACvChF,IAAIM,MAAM0E,UACgB,YAAvBA,SAASC,KAAKC,QAAsBF,SAASC,KAAKjE,WACjDqB,KAAK6B,eAAec,SAASC,KAAKjE,WAAWmE,QAE7ClF,aAAawD,MAAM,cAAcpB,KAAKN,QAAQqD,oBAAqB,MAEvE/C,KAAKc,aAAa,iBAAgB,QAsDtCd,KAAKe,YAAYiC,SAhDF,SAAS5E,YACpB+D,SAAS,CAAC/D,OAAQA,OAAQK,aAAa,GAC3CuB,KAAKc,aAAaqB,iBAmDjBnE,MAAQA,MAAM2B,aACd3B,MAAM8B,KAAKD,KAAKb,QAASuB,qBAE9BA,uBAGJL,aAAc,eACNF,KAAKH,KACT9B,IAAIkF,YAAY,CACZ,KAAS,2BAA+B,kBACxC,KAAS,0BAA8B,kBACvC,KAAS,gCAAoC,oBAE9CC,MAAK,SAAUC,OACVC,EAAI,EACRpD,KAAKN,QAAQ2B,eAAiB8B,EAAEC,KAChCpD,KAAKN,QAAQ4B,cAAgB6B,EAAEC,KAC/BpD,KAAKN,QAAQqD,oBAAsBI,EAAEC,SAI7CjD,aAAc,gBACLtB,SAASuB,kBAAmB1C,EAAE,uBAAyBmC,KAAKf,eAC5DD,SAASwE,eAAiB3F,EAAE,IAAMmC,KAAKf,SAAW,qBAClDD,SAAS6B,YAAchD,EAAE,IAAMmC,KAAKf,SAAW,qBAC/CG,YAAcY,KAAKhB,SAASwE,eAAeT,KAAK,oBAChD1D,OAAOW,KAAKhB,SAASwE,eAAeT,KAAK,eACzCxD,KAAKS,KAAKhB,SAASwE,eAAeT,KAAK,aACvCzD,OAAOU,KAAKhB,SAASwE,eAAeT,KAAK,eACzC5D,QAAQa,KAAKhB,SAASwE,eAAeT,KAAK,gBAC1C1E,WAAW2B,KAAKhB,SAASwE,eAAeT,KAAK,eAGtDU,iBAAkB,WACXzD,KAAK1B,MAAMM,kBACL8E,mBAIbzC,aAAc,SAAS0C,SAASC,QACJ,iBAAbD,SACP7F,IAAIM,MAAM,gBAAkBuF,SAAW,IAAMC,KACzC5D,KAAK1B,MAAMqF,YAAcC,WACpBtF,MAAMqF,UAAYC,SAClB1E,qBAER,KACI,IAAI2E,WAAWF,cACXrF,MAAMuF,SAAWF,SAASE,SAC/B/F,IAAIM,MAAM,gBAAkByF,QAAU,IAAMF,SAASE,eAEpD3E,kBAIbuB,gBAAiB,eACTN,KAAOH,UACNhB,SAASuB,kBAAkBuD,OAAM,WAClC3D,KAAKuD,0BAGJxE,cAAc,WAEXiB,KAAK7B,MAAMO,cACXsB,KAAK4D,sBAAsB,QAE3B5D,KAAK4D,sBAAsB,QAG5B5D,KAAK7B,MAAMO,eAAiBsB,KAAK7B,MAAMM,iBACjCI,SAASwE,eAAeQ,IAAI,aAAc,aAE1ChF,SAASwE,eAAeQ,IAAI,aAAc,SAInD7D,KAAKnB,SAASwE,eAAe1C,KAAKX,KAAK8D,sBAK/CF,sBAAuB,SAASvD,MACzBA,UACMxB,SAASwE,eAAeQ,IAAI,iBAAkB,aAE9ChF,SAASwE,eAAeQ,IAAI,iBAAkB,SAM3DhC,eAAe,SAASlD,YACpBhB,IAAIM,MAAM,cAAgBU,gBACtBoF,QAAQ,CACZA,KAAa,UACbA,QAAQC,eAAiBrF,gBAEpBsB,SAAS8D,UAGlBhC,sBAAsB,SAASpD,gBACvBoF,QAAQ,CACZA,KAAa,iBACbA,QAAQC,eAAiBrF,gBAEpBsB,SAAS8D,UAGlBE,UAAW,SAASC,aACTA,KAAKC,QAAQ,kDAAkD,IAAIC,eAG9EN,iBAAkB,kBAEVjE,KAAK1B,MAAMO,cASJ,oCAPHmB,KAAK1B,MAAMM,YACJ,yBAEA,gCAOnB8E,gBAAiB,eAGT1D,KAAK1B,MAAMO,iBAKXmB,KAAK1B,MAAMM,YAPLoB,KAQD7B,MAAMgD,OAGRnB,KAAKP,eAXFO,KAYGiB,aAAa,eAAc,GAZ9BjB,KAaGiB,aAAa,iBAAgB,QAC7BzB,WAAW2B,cAIXF,aAAa,iBAAgB,QAC7BC,YAAYC,gBAnBfnB,KAyBDN,YAAc,EAzBbM,KA0BD7B,MAAMqG,QA1BLxE,KA2BD7B,MAAMO,QAIRsB,KAAKP,mBACCwB,aAAa,eAAc,QAC3BzB,WAAWd,YAGd,KACE4D,SAAW,CACX/D,OAAQ,KACRC,KAAM,KACNC,QAAS,KACTC,MAAO,IAAI+D,KACX9D,IAAK,KACLC,aAAa,EACbC,eAAc,EACdC,WAAY,WAEXmC,aAAaqB,eACbpB,YAAYxC,UAM7BmE,YAAa,SAASrE,KAAM4B,cACpBqE,aAAe,IAAIC,SACnBC,SAAW3E,KAAKf,SAAW0D,KAAKiC,MAAsB,IAAhBjC,KAAKkC,UAAmB,OAClEJ,aAAaK,OAAO,YAAatG,KAAMmG,UACvCF,aAAaK,OAAO,SAAU9E,KAAKZ,aAChCY,KAAKL,WACJ8E,aAAaK,OAAO,aAAc,SAElCL,aAAaK,OAAO,aAAc,SAGd,IAArB9E,KAAKJ,eACJ6E,aAAaK,OAAO,SAAU9E,KAAKJ,eAEvC6E,aAAaK,OAAO,OAAQ9E,KAAKT,MACjCkF,aAAaK,OAAO,UAAWC,EAAEC,IAAIC,aAEjCC,KAAO,IAAIC,eACfD,KAAKE,KAAK,OAAQpF,KAAKV,QAAQ,GAC/B4F,KAAKG,iBAAkB,SAASC,iBAChCJ,KAAKK,OAAS,SAASC,QACC,MAAhBN,KAAKO,OACLrF,SAASsF,KAAKC,MAAMT,KAAKpC,YAEzB1C,SAAS,CAAC2C,KAAM,CAACC,OAAQ,WACzBlF,IAAIM,MAAM8G,KAAK7D,aAInB6D,KAAKU,KAAKnB,cACb,MAAMoB,KACHzF,SAAS,CAAC2C,KAAM,CAACC,OAAQ,WACzBlF,IAAIM,MAAMyH"}