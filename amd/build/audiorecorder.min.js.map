{"version":3,"file":"audiorecorder.min.js","sources":["../src/audiorecorder.js"],"sourcesContent":["define(['jquery', 'core/log','core/notification', 'qtype_aitext/audiohelper','qtype_aitext/browserrec','core/str' ],\n    function ($, log, notification, audioHelper, browserRec,str) {\n    \"use strict\"; // jshint ;_;\n    /*\n    *  The TT recorder\n     */\n\n    log.debug('qtype_aitext Audio Recorder: initialising');\n\n    return {\n        waveHeight: 75,\n        audio: {\n            stream: null,\n            blob: null,\n            dataURI: null,\n            start: null,\n            end: null,\n            isRecording: false,\n            isRecognizing: false,\n            transcript: null\n        },\n        submitting: false,\n        controls: {},\n        uniqueid: null,\n        audio_updated: null,\n        maxtime: 15000,\n        passagehash: null,\n        region: null,\n        asrurl: null,\n        lang: null,\n        browserrec: null,\n        usebrowserrec: false,\n        currentTime: 0,\n        stt_guided: false,\n        currentPrompt: false,\n        strings: {},\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        init: function(opts){\n            var that = this;\n            this.uniqueid=opts['uniqueid'];\n            this.callback=opts['callback'];\n            this.stt_guided = opts['stt_guided'] ? opts['stt_guided'] : false;\n            this.init_strings();\n            this.prepare_html();\n            this.controls.recordercontainer.show();\n            this.register_events();\n\n\n            //callbacks\n            var on_error = function(error) {\n                switch (error.name) {\n                    case 'PermissionDeniedError':\n                    case 'NotAllowedError':\n                        notification.alert(\"Error\",that.strings.allowmicaccess, \"OK\");\n                        break;\n                    case 'DevicesNotFoundError':\n                    case 'NotFoundError':\n                        notification.alert(\"Error\",that.strings.nomicdetected, \"OK\");\n                        break;\n                    default:\n                        //other errors, like from Edge can fire repeatedly so a notification is not a good idea\n                        //notification.alert(\"Error\", error.name, \"OK\");\n                        log.debug(\"Error\", error.name);\n                }\n            };\n\n            var on_stopped = function(blob) {\n                clearInterval(that.interval);\n\n                //if the blob is undefined then the user is super clicking or something\n                if(blob===undefined){\n                    return;\n                }\n\n                //if ds recc\n                var newaudio = {\n                    blob: blob,\n                    dataURI: URL.createObjectURL(blob),\n                    end: new Date(),\n                    isRecording: false,\n                    length: Math.round((that.audio.end - that.audio.start) / 1000),\n                };\n                that.update_audio(newaudio);\n\n                that.deepSpeech2(that.audio.blob, function(response){\n                    log.debug(response);\n                    if(response.data.result===\"success\" && response.data.transcript){\n                        that.gotRecognition(response.data.transcript.trim());\n                    } else {\n                        notification.alert(\"Information\",that.strings.speechnotrecognized, \"OK\");\n                    }\n                    that.update_audio('isRecognizing',false);\n                });\n\n            };\n\n            //set up events\n            var on_gotstream=  function(stream) {\n                //clear any existing interval\n                if(that.interval!==undefined){\n                    clearInterval(that.interval);\n                }\n\n                var newaudio={stream: stream, isRecording: true};\n                that.update_audio(newaudio);\n                that.currentTime = 0;\n                //if we have a time limit run an interval to check ever 10ms if we should stop\n                if (that.maxtime>0) {\n                    that.interval = setInterval(function () {\n                        if (that.currentTime < that.maxtime) {\n                            that.currentTime += 10;\n                        } else {\n                            that.update_audio('isRecognizing', true);\n                            // vm.isRecognizing = true;\n                            that.audiohelper.stop();\n                        }\n                    }, 10);\n                }\n            };\n\n            //If browser rec (Chrome Speech Rec) (and ds is optiona)\n            if(browserRec.will_work_ok() && ! this.stt_guided){\n                //Init browserrec\n                log.debug(\"using browser rec\");\n                log.debug('arh : ' + that.uniqueid);\n                that.browserrec = browserRec.clone();\n                log.debug('arh : ' + that.uniqueid);\n                that.browserrec.init(that.lang,that.waveHeight,that.uniqueid);\n                that.usebrowserrec=true;\n\n                //set up events\n                that.browserrec.onerror = on_error;\n                that.browserrec.onend = function(){\n                        //do something here\n                };\n                that.browserrec.onstart = function(){\n                    //do something here\n                };\n                that.browserrec.onfinalspeechcapture=function(speechtext){\n                    that.gotRecognition(speechtext);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',false);\n                };\n\n                that.browserrec.oninterimspeechcapture=function(speechtext){\n                    that.gotInterimRecognition(speechtext);\n                };\n\n            //If DS rec\n            }else {\n                //set up wav for ds rec\n                log.debug(\"using ds rec\");\n                this.audiohelper =  audioHelper.clone();\n                this.audiohelper.init(this.waveHeight,this.uniqueid,this);\n\n                that.audiohelper.onError = on_error;\n                that.audiohelper.onStop = on_stopped;\n                that.audiohelper.onStream = on_gotstream;\n\n            }//end of setting up recorders\n        },\n\n        init_strings: function(){\n            var that=this;\n            str.get_strings([\n                { \"key\": \"allowmicaccess\", \"component\": 'mod_minilesson'},\n                { \"key\": \"nomicdetected\", \"component\": 'mod_minilesson'},\n                { \"key\": \"speechnotrecognized\", \"component\": 'mod_minilesson'},\n\n            ]).done(function (s) {\n                var i = 0;\n                that.strings.allowmicaccess = s[i++];\n                that.strings.nomicdetected = s[i++];\n                that.strings.speechnotrecognized = s[i++];\n            });\n        },\n\n        prepare_html: function(){\n            this.controls.recordercontainer =$('.audiorec_container_' + this.uniqueid);\n            this.controls.recorderbutton = $('.' + this.uniqueid + '_recorderdiv');\n            this.passagehash = this.controls.recorderbutton.data('passagehash');\n            this.region=this.controls.recorderbutton.data('region');\n            this.lang=this.controls.recorderbutton.data('lang');\n            this.asrurl=this.controls.recorderbutton.data('asrurl');\n            this.maxtime=this.controls.recorderbutton.data('maxtime');\n            this.waveHeight=this.controls.recorderbutton.data('waveheight');\n        },\n\n        silence_detected: function(){\n            if(this.audio.isRecording){\n                this.toggleRecording();\n            }\n        },\n\n        update_audio: function(newprops,val){\n            if (typeof newprops === 'string') {\n                log.debug('update_audio:' + newprops + ':' + val);\n                if (this.audio[newprops] !== val) {\n                    this.audio[newprops] = val;\n                    this.audio_updated();\n                }\n            }else{\n                for (var theprop in newprops) {\n                    this.audio[theprop] = newprops[theprop];\n                    log.debug('update_audio:' + theprop + ':' + newprops[theprop]);\n                }\n                this.audio_updated();\n            }\n        },\n\n        register_events: function(){\n            var that = this;\n            this.controls.recordercontainer.click(function(){\n                that.toggleRecording();\n            });\n\n            this.audio_updated=function() {\n                //pointer\n                if (that.audio.isRecognizing) {\n                    that.show_recorder_pointer('none');\n                } else {\n                    that.show_recorder_pointer('auto');\n                }\n\n                if(that.audio.isRecognizing || that.audio.isRecording ) {\n                    this.controls.recorderbutton.css('background', '#e52');\n                }else{\n                    this.controls.recorderbutton.css('background', 'green');\n                }\n\n                //div content WHEN?\n                that.controls.recorderbutton.html(that.recordBtnContent());\n            };\n\n        },\n\n        show_recorder_pointer: function(show){\n            if(show) {\n                this.controls.recorderbutton.css('pointer-events', 'none');\n            }else{\n                this.controls.recorderbutton.css('pointer-events', 'auto');\n            }\n\n        },\n\n\n        gotRecognition:function(transcript){\n            log.debug('transcript:' + transcript);\n            var message={};\n            message.type='speech';\n            message.capturedspeech = transcript;\n           //POINT\n            this.callback(message);\n        },\n\n        gotInterimRecognition:function(transcript){\n            var message={};\n            message.type='interimspeech';\n            message.capturedspeech = transcript;\n            //POINT\n            this.callback(message);\n        },\n\n        cleanWord: function(word) {\n            return word.replace(/['!\"#$%&\\\\'()\\*+,\\-\\.\\/:;<=>?@\\[\\\\\\]\\^_`{|}~']/g,\"\").toLowerCase();\n        },\n\n        recordBtnContent: function() {\n\n            if(!this.audio.isRecognizing){\n\n                if (this.audio.isRecording) {\n                    return '<i class=\"fa fa-stop\">';\n                } else {\n                    return '<i class=\"fa fa-microphone\">';\n                }\n\n            } else {\n                return '<i class=\"fa fa-spinner fa-spin\">';\n            }\n        },\n        toggleRecording: function() {\n            var that =this;\n            //If we are recognizing, then we want to discourage super click'ers\n            if (this.audio.isRecognizing) {\n                return;\n            }\n\n            //If we are current recording\n            if (this.audio.isRecording) {\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    clearInterval(that.interval);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',true);\n                    this.browserrec.stop();\n\n                //If using DS rec\n                }else{\n                    this.update_audio('isRecognizing',true);\n                    this.audiohelper.stop();\n                }\n\n             //If we are NOT currently recording\n            } else {\n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    this.update_audio('isRecording',true);\n                    this.browserrec.start();\n                    that.currentTime = 0;\n                    //if we have a time limit run an interval to check ever 10ms if we should stop\n                    if(that.maxtime>0) {\n                        this.interval = setInterval(function () {\n                            if (that.currentTime < that.maxtime) {\n                                that.currentTime += 10;\n                            } else {\n                                that.update_audio('isRecording', false);\n                                that.update_audio('isRecognizing', true);\n                                clearInterval(that.interval);\n                                that.browserrec.stop();\n                            }\n                        }, 10);\n                    }\n\n                //If using DS Rec\n                }else {\n                    var newaudio = {\n                        stream: null,\n                        blob: null,\n                        dataURI: null,\n                        start: new Date(),\n                        end: null,\n                        isRecording: false,\n                        isRecognizing:false,\n                        transcript: null\n                    };\n                    this.update_audio(newaudio);\n                    this.audiohelper.start();\n                }\n            }\n        },\n\n\n        deepSpeech2: function(blob, callback) {\n            var bodyFormData = new FormData();\n            var blobname = this.uniqueid + Math.floor(Math.random() * 100) +  '.wav';\n            bodyFormData.append('audioFile', blob, blobname);\n            bodyFormData.append('scorer', this.passagehash);\n            if(this.stt_guided) {\n                bodyFormData.append('strictmode', 'false');\n            }else{\n                bodyFormData.append('strictmode', 'true');\n            }\n            //prompt is used by whisper and other transcibers down the line\n            if(this.currentPrompt!==false){\n                bodyFormData.append('prompt', this.currentPrompt);\n            }\n            bodyFormData.append('lang', this.lang);\n            bodyFormData.append('wwwroot', M.cfg.wwwroot);\n\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"POST\", this.asrurl, true);\n            oReq.onUploadProgress= function(progressEvent) {};\n            oReq.onload = function(oEvent) {\n                if (oReq.status === 200) {\n                    callback(JSON.parse(oReq.response));\n                } else {\n                    callback({data: {result: \"error\"}});\n                    log.debug(oReq.error);\n                }\n            };\n            try {\n                oReq.send(bodyFormData);\n            }catch(err){\n                callback({data: {result: \"error\"}});\n                log.debug(err);\n            }\n        },\n\n    };//end of return value\n\n});"],"names":["define","$","log","notification","audioHelper","browserRec","str","debug","waveHeight","audio","stream","blob","dataURI","start","end","isRecording","isRecognizing","transcript","submitting","controls","uniqueid","audio_updated","maxtime","passagehash","region","asrurl","lang","browserrec","usebrowserrec","currentTime","stt_guided","currentPrompt","strings","clone","extend","this","init","opts","that","callback","init_strings","prepare_html","recordercontainer","show","register_events","on_error","error","name","alert","allowmicaccess","nomicdetected","will_work_ok","onerror","onend","onstart","onfinalspeechcapture","speechtext","gotRecognition","update_audio","oninterimspeechcapture","gotInterimRecognition","audiohelper","onError","onStop","clearInterval","interval","undefined","newaudio","URL","createObjectURL","Date","length","Math","round","deepSpeech2","response","data","result","trim","speechnotrecognized","onStream","setInterval","stop","get_strings","done","s","i","recorderbutton","silence_detected","toggleRecording","newprops","val","theprop","click","show_recorder_pointer","css","html","recordBtnContent","message","capturedspeech","cleanWord","word","replace","toLowerCase","bodyFormData","FormData","blobname","floor","random","append","M","cfg","wwwroot","oReq","XMLHttpRequest","open","onUploadProgress","progressEvent","onload","oEvent","status","JSON","parse","send","err"],"mappings":"AAAAA,oCAAO,CAAC,SAAU,WAAW,oBAAqB,2BAA2B,0BAA0B,aACnG,SAAUC,EAAGC,IAAKC,aAAcC,YAAaC,WAAWC,YAMxDJ,IAAIK,MAAM,6CAEH,CACHC,WAAY,GACZC,MAAO,CACHC,OAAQ,KACRC,KAAM,KACNC,QAAS,KACTC,MAAO,KACPC,IAAK,KACLC,aAAa,EACbC,eAAe,EACfC,WAAY,MAEhBC,YAAY,EACZC,SAAU,GACVC,SAAU,KACVC,cAAe,KACfC,QAAS,KACTC,YAAa,KACbC,OAAQ,KACRC,OAAQ,KACRC,KAAM,KACNC,WAAY,KACZC,eAAe,EACfC,YAAa,EACbC,YAAY,EACZC,eAAe,EACfC,QAAS,GAGTC,MAAO,kBACIhC,EAAEiC,QAAO,EAAM,GAAIC,OAG9BC,KAAM,SAASC,UACPC,KAAOH,UACNf,SAASiB,KAAI,cACbE,SAASF,KAAI,cACbP,aAAaO,KAAI,YAAiBA,KAAI,gBACtCG,oBACAC,oBACAtB,SAASuB,kBAAkBC,YAC3BC,sBAIDC,SAAW,SAASC,cACZA,MAAMC,UACL,4BACA,kBACD5C,aAAa6C,MAAM,QAAQV,KAAKN,QAAQiB,eAAgB,gBAEvD,2BACA,gBACD9C,aAAa6C,MAAM,QAAQV,KAAKN,QAAQkB,cAAe,oBAKvDhD,IAAIK,MAAM,QAASuC,MAAMC,QA2DlC1C,WAAW8C,iBAAoBhB,KAAKL,YAEnC5B,IAAIK,MAAM,qBACVL,IAAIK,MAAM,SAAW+B,KAAKlB,UAC1BkB,KAAKX,WAAatB,WAAW4B,QAC7B/B,IAAIK,MAAM,SAAW+B,KAAKlB,UAC1BkB,KAAKX,WAAWS,KAAKE,KAAKZ,KAAKY,KAAK9B,WAAW8B,KAAKlB,UACpDkB,KAAKV,eAAc,EAGnBU,KAAKX,WAAWyB,QAAUP,SAC1BP,KAAKX,WAAW0B,MAAQ,aAGxBf,KAAKX,WAAW2B,QAAU,aAG1BhB,KAAKX,WAAW4B,qBAAqB,SAASC,YAC1ClB,KAAKmB,eAAeD,YACpBlB,KAAKoB,aAAa,eAAc,GAChCpB,KAAKoB,aAAa,iBAAgB,IAGtCpB,KAAKX,WAAWgC,uBAAuB,SAASH,YAC5ClB,KAAKsB,sBAAsBJ,eAM/BtD,IAAIK,MAAM,qBACLsD,YAAezD,YAAY6B,aAC3B4B,YAAYzB,KAAKD,KAAK3B,WAAW2B,KAAKf,SAASe,MAEpDG,KAAKuB,YAAYC,QAAUjB,SAC3BP,KAAKuB,YAAYE,OA1FJ,SAASpD,SACtBqD,cAAc1B,KAAK2B,eAGTC,IAAPvD,UAKCwD,SAAW,CACXxD,KAAMA,KACNC,QAASwD,IAAIC,gBAAgB1D,MAC7BG,IAAK,IAAIwD,KACTvD,aAAa,EACbwD,OAAQC,KAAKC,OAAOnC,KAAK7B,MAAMK,IAAMwB,KAAK7B,MAAMI,OAAS,MAE7DyB,KAAKoB,aAAaS,UAElB7B,KAAKoC,YAAYpC,KAAK7B,MAAME,MAAM,SAASgE,UACvCzE,IAAIK,MAAMoE,UACgB,YAAvBA,SAASC,KAAKC,QAAsBF,SAASC,KAAK3D,WACjDqB,KAAKmB,eAAekB,SAASC,KAAK3D,WAAW6D,QAE7C3E,aAAa6C,MAAM,cAAcV,KAAKN,QAAQ+C,oBAAqB,MAEvEzC,KAAKoB,aAAa,iBAAgB,QAkEtCpB,KAAKuB,YAAYmB,SA5DF,SAAStE,aAELwD,IAAhB5B,KAAK2B,UACJD,cAAc1B,KAAK2B,cAGnBE,SAAS,CAACzD,OAAQA,OAAQK,aAAa,GAC3CuB,KAAKoB,aAAaS,UAClB7B,KAAKT,YAAc,EAEfS,KAAKhB,QAAQ,IACbgB,KAAK2B,SAAWgB,aAAY,WACpB3C,KAAKT,YAAcS,KAAKhB,QACxBgB,KAAKT,aAAe,IAEpBS,KAAKoB,aAAa,iBAAiB,GAEnCpB,KAAKuB,YAAYqB,UAEtB,QA8Cf1C,aAAc,eACNF,KAAKH,KACT7B,IAAI6E,YAAY,CACZ,KAAS,2BAA+B,kBACxC,KAAS,0BAA8B,kBACvC,KAAS,gCAAoC,oBAE9CC,MAAK,SAAUC,OACVC,EAAI,EACRhD,KAAKN,QAAQiB,eAAiBoC,EAAEC,KAChChD,KAAKN,QAAQkB,cAAgBmC,EAAEC,KAC/BhD,KAAKN,QAAQ+C,oBAAsBM,EAAEC,SAI7C7C,aAAc,gBACLtB,SAASuB,kBAAmBzC,EAAE,uBAAyBkC,KAAKf,eAC5DD,SAASoE,eAAiBtF,EAAE,IAAMkC,KAAKf,SAAW,qBAClDG,YAAcY,KAAKhB,SAASoE,eAAeX,KAAK,oBAChDpD,OAAOW,KAAKhB,SAASoE,eAAeX,KAAK,eACzClD,KAAKS,KAAKhB,SAASoE,eAAeX,KAAK,aACvCnD,OAAOU,KAAKhB,SAASoE,eAAeX,KAAK,eACzCtD,QAAQa,KAAKhB,SAASoE,eAAeX,KAAK,gBAC1CpE,WAAW2B,KAAKhB,SAASoE,eAAeX,KAAK,eAGtDY,iBAAkB,WACXrD,KAAK1B,MAAMM,kBACL0E,mBAIb/B,aAAc,SAASgC,SAASC,QACJ,iBAAbD,SACPxF,IAAIK,MAAM,gBAAkBmF,SAAW,IAAMC,KACzCxD,KAAK1B,MAAMiF,YAAcC,WACpBlF,MAAMiF,UAAYC,SAClBtE,qBAER,KACI,IAAIuE,WAAWF,cACXjF,MAAMmF,SAAWF,SAASE,SAC/B1F,IAAIK,MAAM,gBAAkBqF,QAAU,IAAMF,SAASE,eAEpDvE,kBAIbuB,gBAAiB,eACTN,KAAOH,UACNhB,SAASuB,kBAAkBmD,OAAM,WAClCvD,KAAKmD,0BAGJpE,cAAc,WAEXiB,KAAK7B,MAAMO,cACXsB,KAAKwD,sBAAsB,QAE3BxD,KAAKwD,sBAAsB,QAG5BxD,KAAK7B,MAAMO,eAAiBsB,KAAK7B,MAAMM,iBACjCI,SAASoE,eAAeQ,IAAI,aAAc,aAE1C5E,SAASoE,eAAeQ,IAAI,aAAc,SAInDzD,KAAKnB,SAASoE,eAAeS,KAAK1D,KAAK2D,sBAK/CH,sBAAuB,SAASnD,MACzBA,UACMxB,SAASoE,eAAeQ,IAAI,iBAAkB,aAE9C5E,SAASoE,eAAeQ,IAAI,iBAAkB,SAM3DtC,eAAe,SAASxC,YACpBf,IAAIK,MAAM,cAAgBU,gBACtBiF,QAAQ,CACZA,KAAa,UACbA,QAAQC,eAAiBlF,gBAEpBsB,SAAS2D,UAGlBtC,sBAAsB,SAAS3C,gBACvBiF,QAAQ,CACZA,KAAa,iBACbA,QAAQC,eAAiBlF,gBAEpBsB,SAAS2D,UAGlBE,UAAW,SAASC,aACTA,KAAKC,QAAQ,kDAAkD,IAAIC,eAG9EN,iBAAkB,kBAEV9D,KAAK1B,MAAMO,cASJ,oCAPHmB,KAAK1B,MAAMM,YACJ,yBAEA,gCAOnB0E,gBAAiB,eACTnD,KAAMH,SAENA,KAAK1B,MAAMO,iBAKXmB,KAAK1B,MAAMM,YAERoB,KAAKP,eACJoC,cAAc1B,KAAK2B,UACnB3B,KAAKoB,aAAa,eAAc,GAChCpB,KAAKoB,aAAa,iBAAgB,QAC7B/B,WAAWuD,cAIXxB,aAAa,iBAAgB,QAC7BG,YAAYqB,gBAOlB/C,KAAKP,mBACC8B,aAAa,eAAc,QAC3B/B,WAAWd,QAChByB,KAAKT,YAAc,EAEhBS,KAAKhB,QAAQ,SACP2C,SAAWgB,aAAY,WACpB3C,KAAKT,YAAcS,KAAKhB,QACxBgB,KAAKT,aAAe,IAEpBS,KAAKoB,aAAa,eAAe,GACjCpB,KAAKoB,aAAa,iBAAiB,GACnCM,cAAc1B,KAAK2B,UACnB3B,KAAKX,WAAWuD,UAErB,SAIL,KACEf,SAAW,CACXzD,OAAQ,KACRC,KAAM,KACNC,QAAS,KACTC,MAAO,IAAIyD,KACXxD,IAAK,KACLC,aAAa,EACbC,eAAc,EACdC,WAAY,WAEXyC,aAAaS,eACbN,YAAYhD,UAM7B6D,YAAa,SAAS/D,KAAM4B,cACpBiE,aAAe,IAAIC,SACnBC,SAAWvE,KAAKf,SAAWoD,KAAKmC,MAAsB,IAAhBnC,KAAKoC,UAAmB,OAClEJ,aAAaK,OAAO,YAAalG,KAAM+F,UACvCF,aAAaK,OAAO,SAAU1E,KAAKZ,aAChCY,KAAKL,WACJ0E,aAAaK,OAAO,aAAc,SAElCL,aAAaK,OAAO,aAAc,SAGd,IAArB1E,KAAKJ,eACJyE,aAAaK,OAAO,SAAU1E,KAAKJ,eAEvCyE,aAAaK,OAAO,OAAQ1E,KAAKT,MACjC8E,aAAaK,OAAO,UAAWC,EAAEC,IAAIC,aAEjCC,KAAO,IAAIC,eACfD,KAAKE,KAAK,OAAQhF,KAAKV,QAAQ,GAC/BwF,KAAKG,iBAAkB,SAASC,iBAChCJ,KAAKK,OAAS,SAASC,QACC,MAAhBN,KAAKO,OACLjF,SAASkF,KAAKC,MAAMT,KAAKtC,YAEzBpC,SAAS,CAACqC,KAAM,CAACC,OAAQ,WACzB3E,IAAIK,MAAM0G,KAAKnE,aAInBmE,KAAKU,KAAKnB,cACb,MAAMoB,KACHrF,SAAS,CAACqC,KAAM,CAACC,OAAQ,WACzB3E,IAAIK,MAAMqH"}