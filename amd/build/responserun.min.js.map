{"version":3,"file":"responserun.min.js","sources":["../src/responserun.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Take the sample response and make an AJAX request to the LLM.\n *\n * @module     qtype_aitext/responserun\n * @copyright  2024 Marcus Green\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {\n    get_strings\n} from 'core/str';\nimport Ajax from 'core/ajax';\nimport Notify from 'core/notification';\nimport Log from 'core/log';\nimport {\n    exception as displayException\n} from 'core/notification';\n\n\nexport const init = (contextid) => {\n\n    const Selectors = {\n        fields: {\n            sampleresponse: '#id_sampleresponse',\n            sampleresponsebtn: '#id_sampleresponsebtn',\n            sampleresponseeval: '#id_sampleresponseeval',\n        },\n    };\n    // Normalize evaluation container IDs by deriving the index from the nearest sampleresponses textarea.\n    // Note: The hardcoded HTML div has id=\"id_sampleresponseeval\" (no suffix), repeated for each sample.\n    const allResponses = Array.from(document.querySelectorAll(\"[id^='id_sampleresponses_']\"));\n    Log.debug('Found ' + allResponses.length + ' sampleresponses textareas');\n\n    allResponses.forEach((responseTextarea) => {\n        // Extract the index from the textarea ID (e.g., \"id_sampleresponses_0\" -> \"0\").\n        const match = responseTextarea.id.match(/_(\\d+)$/);\n        if (!match) {\n            Log.debug('No match for textarea: ' + responseTextarea.id);\n            return;\n        }\n        const idx = match[1];\n        Log.debug('Processing textarea index: ' + idx);\n\n        // Find all eval divs with the base id.\n        const allEvals = Array.from(document.querySelectorAll('[id=\"id_sampleresponseeval\"]'));\n        Log.debug('Found ' + allEvals.length + ' eval divs with base id');\n\n        // Find the nearest following eval div (should be in the same repeated group).\n        let evalEl = null;\n        for (const candidate of allEvals) {\n            if (responseTextarea.compareDocumentPosition(candidate) & Node.DOCUMENT_POSITION_FOLLOWING) {\n                evalEl = candidate;\n                Log.debug('Found matching eval div for index ' + idx);\n                break;\n            }\n        }\n\n        if (evalEl) {\n            const newId = 'id_responseeval_' + idx;\n            Log.debug('Renaming eval div to: ' + newId);\n            evalEl.id = newId;\n        } else {\n            Log.debug('No eval div found for index ' + idx);\n        }\n    });\n    let elementcount = document.querySelectorAll(\"[id^='id_sampleresponsebtn']\");\n    let SelectorsWithCount = {};\n\n    for (let i = 0; i < elementcount.length; i++) {\n        SelectorsWithCount.fields = {};\n        for (let key in Selectors.fields) {\n            SelectorsWithCount.fields[key] = Selectors.fields[key] + \"_\" + i;\n            SelectorsWithCount.fields.aiprompt = '#id_aiprompt';\n            SelectorsWithCount.fields.markscheme = '#id_markscheme';\n            SelectorsWithCount.fields.defaultmark = '#id_defaultmark';\n        }\n        clickSetup(contextid, SelectorsWithCount);\n    }\n\n};\n\n/**\n * Configure event handlers\n *\n * @param {number} contextid\n * @param {object} Selectors\n */\nfunction clickSetup(contextid, Selectors) {\n    // Set up strings\n    var strings = {};\n    get_strings([{\n            \"key\": \"responsetester\",\n            \"component\": 'qtype_aitext'\n        },\n        {\n            \"key\": \"sampleresponseempty\",\n            \"component\": 'qtype_aitext'\n        },\n\n    ]).done(function(s) {\n        var i = 0;\n        strings.responsetester = s[i++];\n        strings.sampleresponseempty = s[i++];\n    });\n    document.querySelector(Selectors.fields.sampleresponsebtn).addEventListener('click', e => {\n        let index = e.target.id.lastIndexOf(\"_\");\n        let id = e.target.id.slice(index + 1);\n\n        const sampleresponse = document.getElementById('id_sampleresponses' + '_' + id);\n        const sampleresponseeval = document.getElementById('id_responseeval_' + id);\n\n        const aiprompt = document.getElementById('id_aiprompt');\n        const marksscheme = document.getElementById('id_markscheme');\n        const defaultmark = document.getElementById('id_defaultmark');\n        // Include current question text for AI grading if referenced in prompt.\n        const questiontextElem = document.getElementById('id_questiontext');\n        const questiontext = questiontextElem ? questiontextElem.value : '';\n\n        const spinnerOuter = document.querySelector('#fitem_id_spinner_' + id);\n        const spinner = spinnerOuter.querySelector('#id_spinner');\n\n        if (sampleresponse.value === \"\" || aiprompt.value === \"\") {\n            Notify.alert(strings.responsetester, strings.sampleresponseempty);\n            return;\n        }\n        // Put  spinner in place.\n        spinner.innerHTML = '<span class=\"loading-icon icon-no-margin\">';\n        spinner.innerHTML += ' <i class=\"fa fa-spinner fa-spin fa-3x fa-fw\"\" title=\"Loading\" role=\"img\" aria-label=\"Loading\"></i>';\n        spinner.innerHTML += '</span>';\n\n        spinner.classList.remove('hide');\n        Ajax.call([{\n            methodname: 'qtype_aitext_fetch_ai_grade',\n            args: {\n                response: sampleresponse.value,\n                defaultmark: defaultmark.value,\n                prompt: aiprompt.value,\n                marksscheme: marksscheme.value,\n                questiontext: questiontext,\n                contextid: contextid\n            },\n            async: false\n        }])[0].then(function(airesponse) {\n            Log.debug(airesponse);\n            if (airesponse.feedback) {\n                // Render HTML so tags are not escaped.\n                sampleresponseeval.innerHTML = airesponse.feedback +\n                    ' (GRADE: ' + airesponse.marks + '/' + defaultmark.value + ')';\n                spinner.classList.add('hide');\n            }\n            return true;\n        }).fail(error => {\n            displayException(error);\n            sampleresponseeval.innerHTML = '';\n        });\n\n    }); // End of click.\n\n}\n"],"names":["clickSetup","contextid","Selectors","strings","done","s","i","responsetester","sampleresponseempty","document","querySelector","fields","sampleresponsebtn","addEventListener","e","index","target","id","lastIndexOf","slice","sampleresponse","getElementById","sampleresponseeval","aiprompt","marksscheme","defaultmark","questiontextElem","questiontext","value","spinner","innerHTML","classList","remove","call","methodname","args","response","prompt","async","then","airesponse","debug","feedback","marks","add","fail","error","alert","allResponses","Array","from","querySelectorAll","length","forEach","responseTextarea","match","idx","allEvals","evalEl","candidate","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","newId","elementcount","SelectorsWithCount","key","markscheme"],"mappings":";;;;;;;20BAsGSA,WAAWC,UAAWC,eAEvBC,QAAU,wBACF,CAAC,KACE,2BACM,gBAEjB,KACW,gCACM,kBAGlBC,MAAK,SAASC,OACTC,EAAI,EACRH,QAAQI,eAAiBF,EAAEC,KAC3BH,QAAQK,oBAAsBH,EAAEC,QAEpCG,SAASC,cAAcR,UAAUS,OAAOC,mBAAmBC,iBAAiB,SAASC,QAC7EC,MAAQD,EAAEE,OAAOC,GAAGC,YAAY,KAChCD,GAAKH,EAAEE,OAAOC,GAAGE,MAAMJ,MAAQ,SAE7BK,eAAiBX,SAASY,eAAe,sBAA6BJ,IACtEK,mBAAqBb,SAASY,eAAe,mBAAqBJ,IAElEM,SAAWd,SAASY,eAAe,eACnCG,YAAcf,SAASY,eAAe,iBACtCI,YAAchB,SAASY,eAAe,kBAEtCK,iBAAmBjB,SAASY,eAAe,mBAC3CM,aAAeD,iBAAmBA,iBAAiBE,MAAQ,GAG3DC,QADepB,SAASC,cAAc,qBAAuBO,IACtCP,cAAc,eAEd,KAAzBU,eAAeQ,OAAmC,KAAnBL,SAASK,OAK5CC,QAAQC,UAAY,6CACpBD,QAAQC,WAAa,sGACrBD,QAAQC,WAAa,UAErBD,QAAQE,UAAUC,OAAO,sBACpBC,KAAK,CAAC,CACPC,WAAY,8BACZC,KAAM,CACFC,SAAUhB,eAAeQ,MACzBH,YAAaA,YAAYG,MACzBS,OAAQd,SAASK,MACjBJ,YAAaA,YAAYI,MACzBD,aAAcA,aACd1B,UAAWA,WAEfqC,OAAO,KACP,GAAGC,MAAK,SAASC,gCACbC,MAAMD,YACNA,WAAWE,WAEXpB,mBAAmBQ,UAAYU,WAAWE,SACtC,YAAcF,WAAWG,MAAQ,IAAMlB,YAAYG,MAAQ,IAC/DC,QAAQE,UAAUa,IAAI,UAEnB,KACRC,MAAKC,oCACaA,OACjBxB,mBAAmBQ,UAAY,6BA/BxBiB,MAAM5C,QAAQI,eAAgBJ,QAAQK,sCAvGpCP,kBAEXC,iBACM,CACJkB,eAAgB,qBAChBR,kBAAmB,wBACnBU,mBAAoB,0BAKtB0B,aAAeC,MAAMC,KAAKzC,SAAS0C,iBAAiB,6CACtDV,MAAM,SAAWO,aAAaI,OAAS,8BAE3CJ,aAAaK,SAASC,yBAEZC,MAAQD,iBAAiBrC,GAAGsC,MAAM,eACnCA,+BACGd,MAAM,0BAA4Ba,iBAAiBrC,UAGrDuC,IAAMD,MAAM,gBACdd,MAAM,8BAAgCe,WAGpCC,SAAWR,MAAMC,KAAKzC,SAAS0C,iBAAiB,8CAClDV,MAAM,SAAWgB,SAASL,OAAS,+BAGnCM,OAAS,SACR,MAAMC,aAAaF,YAChBH,iBAAiBM,wBAAwBD,WAAaE,KAAKC,4BAA6B,CACxFJ,OAASC,uBACLlB,MAAM,qCAAuCe,cAKrDE,OAAQ,OACFK,MAAQ,mBAAqBP,iBAC/Bf,MAAM,yBAA2BsB,OACrCL,OAAOzC,GAAK8C,wBAERtB,MAAM,+BAAiCe,YAG/CQ,aAAevD,SAAS0C,iBAAiB,gCACzCc,mBAAqB,OAEpB,IAAI3D,EAAI,EAAGA,EAAI0D,aAAaZ,OAAQ9C,IAAK,CAC1C2D,mBAAmBtD,OAAS,OACvB,IAAIuD,OAAOhE,iBACZ+D,mBAAmBtD,OAAOuD,KAAOhE,iBAAiBgE,KAAO,IAAM5D,EAC/D2D,mBAAmBtD,OAAOY,SAAW,eACrC0C,mBAAmBtD,OAAOwD,WAAa,iBACvCF,mBAAmBtD,OAAOc,YAAc,kBAE5CzB,WAAWC,UAAWgE"}