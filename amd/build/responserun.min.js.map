{"version":3,"file":"responserun.min.js","sources":["../src/responserun.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display a button in testing to reveal the prompt that was sent\n *\n * @module     qtype_aitext/responserun\n * @copyright  2024 Marcus Green\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_strings} from 'core/str';\nimport Ajax from 'core/ajax';\nimport Notify from 'core/notification';\nimport Log from 'core/log';\nimport {exception as displayException} from 'core/notification';\n\nconst Selectors = {\n    fields: {\n        sampleanswer: '#id_sampleanswer',\n        sampleanswerbtn: '#id_sampleanswerbtn',\n        sampleanswereval: '#id_sampleanswereval',\n        spinner: '#id_spinner',\n        aiprompt: '#id_aiprompt',\n        markscheme: '#id_markscheme',\n        defaultmark: '#id_defaultmark',\n    },\n};\n\nexport const init = (contextid) => {\n\n    // Set up strings\n    var strings={};\n    get_strings([\n        {\"key\": \"prompttester\", \"component\": 'qtype_aitext'},\n        {\"key\": \"sampleanswerempty\", \"component\": 'qtype_aitext'},\n\n    ]).done(function (s) {\n        var i = 0;\n        strings.prompttester = s[i++];\n        strings.sampleanswerempty = s[i++];\n    });\n    document.querySelector(Selectors.fields.sampleanswerbtn).addEventListener('click', e => {\n        const form = e.target.closest('form');\n        const sampleanswer = form.querySelector(Selectors.fields.sampleanswer);\n        const sampleanswereval = form.querySelector(Selectors.fields.sampleanswereval);\n\n        const aiprompt = form.querySelector(Selectors.fields.aiprompt);\n        const marksscheme = form.querySelector(Selectors.fields.markscheme);\n        const defaultmark = form.querySelector(Selectors.fields.defaultmark);\n        const spinner = form.querySelector(Selectors.fields.spinner);\n\n        if (sampleanswer.value === \"\" || aiprompt.value === \"\") {\n            Notify.alert(strings.prompttester, strings.sampleanswerempty);\n            return;\n        }\n     // Put  spinner in place.\n     spinner.innerHTML = '<span class=\"loading-icon icon-no-margin\">';\n     spinner.innerHTML += ' <i class=\"fa fa-spinner fa-spin fa-3x fa-fw\"\" title=\"Loading\" role=\"img\" aria-label=\"Loading\"></i>';\n     spinner.innerHTML += '</span>';\n\n     spinner.classList.remove('hide');\n     Ajax.call([{\n        methodname: 'qtype_aitext_fetch_ai_grade',\n        args: {\n            response: sampleanswer.value,\n            defaultmark: defaultmark.value,\n            prompt: aiprompt.value,\n            marksscheme: marksscheme.value,\n            contextid: contextid\n        },\n        async: false\n    }])[0].then(function(airesponse) {\n        Log.debug(airesponse);\n        if (airesponse.feedback) {\n            sampleanswereval.textContent = airesponse.feedback + ' (GRADE: ' + airesponse.marks + '/' + defaultmark.value + ')';\n            spinner.classList.add('hide');\n        }\n        return true;\n    }).fail(error => {\n        displayException(error);\n        sampleanswereval.innerHTML = '';\n    });\n\n}); // End of click.\n\n};\n"],"names":["Selectors","sampleanswer","sampleanswerbtn","sampleanswereval","spinner","aiprompt","markscheme","defaultmark","contextid","strings","done","s","i","prompttester","sampleanswerempty","document","querySelector","addEventListener","e","form","target","closest","marksscheme","value","innerHTML","classList","remove","call","methodname","args","response","prompt","async","then","airesponse","debug","feedback","textContent","marks","add","fail","error","alert"],"mappings":";;;;;;;w0BA6BMA,iBACM,CACJC,aAAc,mBACdC,gBAAiB,sBACjBC,iBAAkB,uBAClBC,QAAS,cACTC,SAAU,eACVC,WAAY,iBACZC,YAAa,iCAIAC,gBAGbC,QAAQ,wBACA,CACR,KAAQ,yBAA6B,gBACrC,KAAQ,8BAAkC,kBAE3CC,MAAK,SAAUC,OACVC,EAAI,EACRH,QAAQI,aAAeF,EAAEC,KACzBH,QAAQK,kBAAoBH,EAAEC,QAElCG,SAASC,cAAchB,iBAAiBE,iBAAiBe,iBAAiB,SAASC,UACzEC,KAAOD,EAAEE,OAAOC,QAAQ,QACxBpB,aAAekB,KAAKH,cAAchB,iBAAiBC,cACnDE,iBAAmBgB,KAAKH,cAAchB,iBAAiBG,kBAEvDE,SAAWc,KAAKH,cAAchB,iBAAiBK,UAC/CiB,YAAcH,KAAKH,cAAchB,iBAAiBM,YAClDC,YAAcY,KAAKH,cAAchB,iBAAiBO,aAClDH,QAAUe,KAAKH,cAAchB,iBAAiBI,SAEzB,KAAvBH,aAAasB,OAAmC,KAAnBlB,SAASkB,OAK7CnB,QAAQoB,UAAY,6CACpBpB,QAAQoB,WAAa,sGACrBpB,QAAQoB,WAAa,UAErBpB,QAAQqB,UAAUC,OAAO,sBACpBC,KAAK,CAAC,CACRC,WAAY,8BACZC,KAAM,CACFC,SAAU7B,aAAasB,MACvBhB,YAAaA,YAAYgB,MACzBQ,OAAQ1B,SAASkB,MACjBD,YAAaA,YAAYC,MACzBf,UAAWA,WAEfwB,OAAO,KACP,GAAGC,MAAK,SAASC,gCACbC,MAAMD,YACNA,WAAWE,WACXjC,iBAAiBkC,YAAcH,WAAWE,SAAW,YAAcF,WAAWI,MAAQ,IAAM/B,YAAYgB,MAAQ,IAChHnB,QAAQqB,UAAUc,IAAI,UAEnB,KACRC,MAAKC,oCACaA,OACjBtC,iBAAiBqB,UAAY,6BA5BlBkB,MAAMjC,QAAQI,aAAcJ,QAAQK"}